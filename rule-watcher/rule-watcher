#!/bin/sh

apk add --no-cache  curl gettext inotify-tools;

log() {
    echo "time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" "${1}"
}

cleanup() {
    log "msg=\"stopping...\""
    kill "$INOTIFY_PID"
    log "msg=\"stopped inotifywait\""
    exit
}

trap cleanup SIGINT SIGTERM

substituteENV() {
    log "msg=\"substituting the values of environment variables in rules\""
    # when configMap is mounted kube mounts 1 file and 2 symlinks as shown below
    # git-mirror only creates 1 symlink for a file.
    # due to this `-L` is required in find command but when file is mounted via CF
    # script will end up processing each CM file 3 times.
    # to avoid this we will ignore all files with `..data/` or `..2025xx` in path 
    # 
    # /var/thanos/rule-templates # ls -al | grep uw-link.yaml
    # lrwxrwxrwx    1 root   1001  19 Feb 28 13:14 uw-link.yaml -> ..data/uw-link.yaml
    # 
    # /var/thanos/rule-templates # ls -al ..data
    # lrwxrwxrwx    1 root   1001  32 Mar 19 14:40 ..data -> ..2025_03_19_14_40_43.4074988545
    # 
    # /var/thanos/rule-templates # ls -al ..2025_03_19_14_40_43.4074988545 | grep uw-link.yaml
    # -rw-r--r--    1 root   1001  697 Mar 19 14:40 uw-link.yaml
    # 
    # 
    # $ find /var/thanos/rule-templates -type f -name '*uw-link.yaml'
    # /var/thanos/rule-templates/..2025_03_19_14_40_43.4074988545/uw-link.yaml
    #
    # $ find -L /var/thanos/rule-templates -type f -name '*uw-link.yaml'
    # /var/thanos/rule-templates/uw-link.yaml
    # /var/thanos/rule-templates/..2025_03_19_14_40_43.4074988545/uw-link.yaml
    # /var/thanos/rule-templates/..data/uw-link.yaml
    #
    find -L "$TEMPLATED_RULES_PATH" -type f -regex '.*\.\(yaml\|yml\)\(\..*\)\?' | grep -ve '\.\.' | while read -r file; do
        # file paths are unique but file name is not hence create file name 
        # which contains part of dir structure 
        file_name="$(basename "$file")";

        # trim common prefix and `/` if any
        trimmed_file="${file#"$TEMPLATED_RULES_PATH"}";
        trimmed_file="${trimmed_file#/}";
        
        # remove the file name to get the directory path
        dir_path="${trimmed_file%/*}";

        # if there is no dir path then just use file name
        if [ "$dir_path" = "$file_name" ]; then
            # if  name has a .tmpl or .tpl extension - remove it
            file_name=${file_name%".tmpl"} && file_name=${file_name%".tpl"}
            envsubst "$SHELL_FORMAT" < "$file" > "$RENDERED_RULES_PATH/$file_name";
            continue
        fi

        # prefix will be 1st 2 dir so git-mirror/<repo_name>
        prefix="$(printf %s "$dir_path" | awk -F '/' '{print $1"_"$2"_"$3}')"

        # extract the part to hash (the directory path part after <prefix>)
        path_to_hash="${dir_path#"$prefix"/}"
        hash=$(printf %s "$path_to_hash" | sha256sum | cut -c1-8)

        # if name has a .tmpl or .tpl extension - remove it
        file_name=${file_name%".tmpl"} && file_name=${file_name%".tpl"}

        # Construct the new file name
        f="${prefix}_${hash}_${file_name}"

        envsubst "$SHELL_FORMAT" < "$file" > "$RENDERED_RULES_PATH/$f";
    done;
    touch "$RENDERED_RULES_PATH/rule-watcher-rules-ready"
}

triggerReload() {
    log "msg=\"triggering rule reload\""
    if [ "$(curl -s -w "%{http_code}" -X POST "localhost:$RELOAD_PORT/-/reload")" != 200 ]; then 
        log "error: msg=\"failed to reload rules\""
    fi
}

# do initial ENV substituting
substituteENV

# on projected module changes, kube creates new dir "..yyyy_mm_dd_xxx"
# and then moves symlinked dir "..data" to that and deletes old dir
# we will monitor 'DELETE,ISDIR' event of ..yyyy_mm_dd_xxx" delete
# since its the last step in sync files operation
# eg events sequence..
# rules mounted via configMap:
#     /var/thanos/rule-templates/ CREATE,ISDIR ..2024_07_29_13_28_59.2700877023
#     /var/thanos/rule-templates/ CREATE ..data_tmp
#     /var/thanos/rule-templates/ MOVED_FROM ..data_tmp
#     /var/thanos/rule-templates/ MOVED_TO ..data
#     /var/thanos/rule-templates/ DELETE test1.yaml
#     /var/thanos/rule-templates/ DELETE,ISDIR ..2024_07_29_13_27_29.567810463
# rules mounted via git-mirror: 
#     /var/thanos/rule-templates/ CREATE prometheus-ksm-3475893727
#     /var/thanos/rule-templates/ MOVED_FROM prometheus-ksm-3475893727
#     /var/thanos/rule-templates/ MOVED_TO prometheus-ksm
# rules removed via git-mirror: 
#     /var/thanos/rule-templates/git-mirror/slos/ DELETE 12d704f

log "msg=\"starting rule-watcher\""
inotifywait -m -r -e create -e delete -e moved_to --format '%e %w %f' "$TEMPLATED_RULES_PATH" |\
while read -r event path name; do
    log "msg=\"processing\" event=\"${event}\" path=\"${path}\" name=\"${name}\""

    case "$event" in
    "DELETE"|"DELETE,ISDIR")
        debounce_needed=true
        ;;
    "CREATE,ISDIR")
        debounce_needed=true
        ;;
    "MOVED_TO")
        debounce_needed=true
        ;;
    *)
        # This is an unwanted event
        continue
        ;;
    esac

    # when rules are mounted from the configMap after creating symlink (moved_to event)
    # on `..data`, any removed files are removed individually.
    # when worktree (symlink) is rotated script will process 2 events `DELETE and MOVED_TO`
    # this means we reload rules twice for same change and during that brief
    # time all rules are deleted and later re-created.
    # debounce ensures that we only reload rules once all files are changes are completed

    if [ "$debounce_needed" = true ]; then
        # Debounce: wait for a quiet period (5s) with no new events
        debounce_window=5
        last_event_time=$(date +%s)
        while true; do
            if read -t $debounce_window -r te tp tn; then
                log "msg=\"debounce: new event\" event=\"${te}\" path=\"${tp}\" name=\"${tn}\""
                last_event_time=$(date +%s)
                    continue  # keep debouncing
            else
                now=$(date +%s)
                if [ $((now - last_event_time)) -ge $debounce_window ]; then
                    break  # quiet period reached
                fi
            fi
        done
    fi

    log "msg=\"triggering\" event=\"${event}\" path=\"${path}\" name=\"${name}\""

    # clear old rendered rules 
    # (needed as some old files might be removed)
    rm -f "$RENDERED_RULES_PATH"/*

    substituteENV
    triggerReload
done &

INOTIFY_PID=$!

wait $INOTIFY_PID

log "error: msg=\"rule-watcher stopped\""
